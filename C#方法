C#中的方法

首先，C#的法法这个概念就如同Java中的方法，对于C的学习者来说就是函数的意思，它与C中函数的声明类似，首先先声明共有还是私有，之后是函数类型，返回值类型，函数名称以及
函数参数。
如果对于一个参数不确定的函数，我们可以通过paramer数组的形式来解决。

值传递方法——类似于C语言中函数的实现，由于函数的参数为形参，因此函数的传递数据如果是全局变量，那么将不会改变该值。
例： int num = 10;
  Squre(num);   //num*=num;
  Console.WriteLine(num);
  此时得到的数值仍是10，就是类似于C语言中参数的传递。
当我们使用ref关键字的时候该状况将会发生改变，此时这种方法我们称之为引用方法。
ref在调用的参数必须是非常量且必须初始化。

输出参数：out，用于参与运算的形参承接出来
例 max(num[],out int index);注意，此时我们就声明了一个int类型的index，并且在该函数中为out int，因此来讲out的参数必须进行声明，若承接的变量已经声明
则不需要out 后面跟变量类型了。

静态方法： 静态方法不对特定实例进行操作，静态方法只能访问类中的静态成员，而且不能使用实例成员。访问静态方法只能使用类名。而不需要创建对象，也不能使用对象来引用。

虚方法： virtual关键字，必须放在void之前
虚方法的作用就是可以重写，也就说该函数可以被覆盖，例如 class c1 = class c2，我们在调用c1的非虚方法时，产生的值仍为c1的方法值，而虚方法的的值就是c2中含有override的虚方法的返回值
如果我们不希望类的继承方法被重写，那么我们可以使用 sealed 关键字来保护函数。

外部方法：extern，不可以使泛型，该方法在声明时必须包含一个static修饰符。
方法位置：通常类当中，并且与其他方法保持平级关系

分部方法：方法声明中含有partial修饰符
方法必须返回void，只能默认为private，允许ref但不允许out

